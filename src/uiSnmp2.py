# Form implementation generated from reading ui file 'uiSnmp.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox
import pandas as pd
import threading
import json
from pysnmp.hlapi import *
from pysnmp.hlapi import getCmd
import subprocess



class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(937, 499)
        self.btn_clearfile = QtWidgets.QPushButton(parent=Dialog)
        self.btn_clearfile.setGeometry(QtCore.QRect(540, 20, 75, 23))
        self.btn_clearfile.setObjectName("btn_clearfile")
        self.btn_clearfile.clicked.connect(self.stop_snmp_walk)
        self.btn_deletebyoid = QtWidgets.QPushButton(parent=Dialog)
        self.btn_deletebyoid.setGeometry(QtCore.QRect(860, 20, 75, 23))
        self.btn_deletebyoid.setObjectName("btn_deletebyoid")
        self.btn_deletebyoid.clicked.connect(self.delete_oid)

        self.cbo_formSelector = QtWidgets.QComboBox(parent=Dialog)
        self.cbo_formSelector.setGeometry(QtCore.QRect(380, 20, 155, 23))
        self.cbo_formSelector.setObjectName("cbo_formSelector")
        self.cbo_formSelector.addItems(["Delta", "Enatel"])
        self.cbo_formSelector.currentTextChanged.connect(self.handle_form_selection)
        self.txt_port = QtWidgets.QTextEdit(parent=Dialog)
        self.txt_port.setGeometry(QtCore.QRect(110, 370, 104, 21))
        self.txt_port.setObjectName("txt_port")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setGeometry(QtCore.QRect(50, 370, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=Dialog)
        self.label_2.setGeometry(QtCore.QRect(50, 400, 51, 20))
        self.label_2.setObjectName("label_2")
        self.txt_version = QtWidgets.QTextEdit(parent=Dialog)
        self.txt_version.setGeometry(QtCore.QRect(110, 400, 104, 21))
        self.txt_version.setObjectName("txt_version")
        self.label_3 = QtWidgets.QLabel(parent=Dialog)
        self.label_3.setGeometry(QtCore.QRect(240, 370, 81, 16))
        self.label_3.setObjectName("label_3")
        self.txt_readCommunity = QtWidgets.QTextEdit(parent=Dialog)
        self.txt_readCommunity.setGeometry(QtCore.QRect(340, 370, 104, 21))
        self.txt_readCommunity.setObjectName("txt_readCommunity")
        self.label_4 = QtWidgets.QLabel(parent=Dialog)
        self.label_4.setGeometry(QtCore.QRect(240, 400, 81, 20))
        self.label_4.setObjectName("label_4")
        self.txt_writeCommunity = QtWidgets.QTextEdit(parent=Dialog)
        self.txt_writeCommunity.setGeometry(QtCore.QRect(340, 400, 104, 21))
        self.txt_writeCommunity.setObjectName("txt_writeCommunity")
        self.btn_getSnmp = QtWidgets.QPushButton(parent=Dialog)
        self.btn_getSnmp.setGeometry(QtCore.QRect(470, 400, 75, 23))
        self.btn_getSnmp.setObjectName("btn_getSnmp")

        self.btn_setSnmp = QtWidgets.QPushButton(parent=Dialog)
        self.btn_setSnmp.setGeometry(QtCore.QRect(470, 370, 75, 23))
        self.btn_setSnmp.setObjectName("btn_setSnmp")
        self.btn_choosefile = QtWidgets.QPushButton(parent=Dialog)
        self.btn_choosefile.setGeometry(QtCore.QRect(620, 20, 75, 23))
        self.btn_choosefile.setObjectName("btn_choosefile")

        self.txtoid = QtWidgets.QLineEdit(parent=Dialog)
        self.txtoid.setGeometry(QtCore.QRect(100,  20, 200, 23))
        self.txtoid.setObjectName("txtoid")

        self.btn_addOid = QtWidgets.QPushButton(parent=Dialog)
        self.btn_addOid.setGeometry(QtCore.QRect(300, 20, 75, 23))
        self.btn_addOid.setObjectName("btn_addOid")

        self.btn_choosefile.clicked.connect(self.load_ips_from_excel)
        self.tbl_output = QtWidgets.QTableWidget(parent=Dialog)
        self.tbl_output.setGeometry(QtCore.QRect(10, 50, 911, 311))
        self.tbl_output.setObjectName("tbl_output")
        self.tbl_output.setRowCount(0)
        self.initialize_table_headers(["IP"])  # Default column headers
        self.btn_outputExcel = QtWidgets.QPushButton(parent=Dialog)
        self.btn_outputExcel.setGeometry(QtCore.QRect(700, 20, 75, 23))
        self.btn_outputExcel.setObjectName("btn_outputExcel")
        self.btn_outputExcel.clicked.connect(self.export_to_excel)
        self.btn_clearTable = QtWidgets.QPushButton(parent=Dialog)
        self.btn_clearTable.setGeometry(QtCore.QRect(780, 20, 75, 23))
        self.btn_clearTable.setObjectName("btn_clearTable")
        self.btn_clearTable.setText("Clear")
        self.btn_clearTable.clicked.connect(self.clear_table)
        self.txt_port.setText("161")
        self.txt_version.setText("2")
        self.txt_readCommunity.setText("public")
        self.txt_writeCommunity.setText("public")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.snmp_walk_thread = None
        self.stop_snmp_walk_flag = threading.Event()
        self.btn_getSnmp.clicked.connect(self.start_snmp_walk)
        self.btn_addOid.clicked.connect(self.open_addOid_Dialog)
        self.btn_setSnmp.clicked.connect(self.open_set_dialog)

        self.current_oid_file = 'oid_Delta.json'  # Default file
        self.show_delta_columns()  # Automatically load Delta columns on startup
        self.cbo_formSelector.setCurrentText("Delta")  # Set default selection to Delta
        self.tbl_output.cellClicked.connect(self.handle_cell_clicked)  # Connect cellClicked event

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.btn_clearfile.setText(_translate("Dialog", "Stop"))
        self.label.setText(_translate("Dialog", "Port"))
        self.label_2.setText(_translate("Dialog", "Version"))
        self.label_3.setText(_translate("Dialog", "Read Community"))
        self.label_4.setText(_translate("Dialog", "Write Community"))
        self.btn_getSnmp.setText(_translate("Dialog", "Walk"))
        self.btn_setSnmp.setText(_translate("Dialog", "Set"))
        self.btn_deletebyoid.setText(_translate("Dialog", "Delete"))

        self.btn_addOid.setText(_translate("Dialog", "Add Oid"))

        self.btn_choosefile.setText(_translate("Dialog", "Choose file"))
        item = self.tbl_output.horizontalHeaderItem(0)

        self.btn_outputExcel.setText(_translate("Dialog", "Xuất excel"))

    def load_ips_from_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(None, "Open Excel File", "", "Excel Files (*.xlsx *.xls)")
        if file_path:
            df = pd.read_excel(file_path)
            if 'IP' in df.columns:
                ips = df['IP'].tolist()
                self.tbl_output.setRowCount(len(ips))
                for row, ip in enumerate(ips):
                    item = QtWidgets.QTableWidgetItem(ip)
                    self.tbl_output.setItem(row, 0, item)
                    self.tbl_output.setRowHeight(row, 30)
    def open_addOid_Dialog(self):
        """
        Open the Add OID dialog.
        """
        self.add_oid_dialog = QtWidgets.QDialog()
        self.ui_add_oid = Ui_AddOidDialog()
        self.ui_add_oid.setupUi(self.add_oid_dialog)

        # Kết nối nút "Add" với logic thêm OID
        self.ui_add_oid.btn_add.clicked.connect(self.add_oid_to_table)

        # Kết nối nút "Cancel" để đóng form
        self.ui_add_oid.btn_cancel.clicked.connect(self.add_oid_dialog.reject)

        self.add_oid_dialog.exec()
    def delete_oid(self):
        """
        Delete the OID specified in txtoid from the table and listOid.
        """
        oid_to_delete = self.txtoid.text().strip()

        if not oid_to_delete:
            QMessageBox.warning(None, "Warning", "Please enter an OID to delete.")
            return

        # Tìm nameoid tương ứng với OID trong listOid
        name_to_delete = None
        for oid_entry in self.listOid:
            if oid_entry['oid'] == oid_to_delete:
                name_to_delete = oid_entry['nameoid']
                break

        if not name_to_delete:
            QMessageBox.warning(None, "Warning", f"OID '{oid_to_delete}' not found in the table.")
            return

        # Xóa OID khỏi listOid
        self.listOid = [oid for oid in self.listOid if oid['oid'] != oid_to_delete]

        # Xóa cột tương ứng trong bảng (theo nameoid)
        for column in range(self.tbl_output.columnCount()):
            header_item = self.tbl_output.horizontalHeaderItem(column)
            if header_item and header_item.text() == name_to_delete:
                self.tbl_output.removeColumn(column)
                QMessageBox.information(None, "Success", f"OID '{oid_to_delete}' has been deleted.")
                return

        QMessageBox.warning(None, "Warning", f"OID '{oid_to_delete}' not found in the table.")
    def add_oid_to_table(self):
        """
        Add the OID and Name from the Add OID dialog to the table and listOid.
        """
        oid = self.ui_add_oid.txt_oid.text().strip()
        name = self.ui_add_oid.txt_name.text().strip()
        value_type = self.ui_add_oid.cbo_type.currentText()

        if not oid or not name:
            QMessageBox.warning(None, "Warning", "OID and Name cannot be empty.")
            return

        # Thêm OID vào listOid
        self.listOid.append({"oid": oid, "nameoid": name, "valueType": value_type})

        # Thêm cột mới vào bảng
        column_count = self.tbl_output.columnCount()
        self.tbl_output.setColumnCount(column_count + 1)
        new_column_item = QtWidgets.QTableWidgetItem(name)
        self.tbl_output.setHorizontalHeaderItem(column_count, new_column_item)

        QMessageBox.information(None, "Success", f"OID '{oid}' with name '{name}' added successfully.")
        self.add_oid_dialog.accept()
    def start_snmp_walk(self):
        self.stop_snmp_walk_flag.clear()
        self.snmp_walk_thread = threading.Thread(target=self.snmp_walk)
        self.snmp_walk_thread.start()

    def stop_snmp_walk(self):
        if self.snmp_walk_thread and self.snmp_walk_thread.is_alive():
            self.stop_snmp_walk_flag.set()
            self.snmp_walk_thread.join()

    def snmp_walk(self):
        with open(self.current_oid_file) as f:  # Use the selected file
            oid_data = json.load(f)

        ip_list = [self.tbl_output.item(row, 0).text() for row in range(self.tbl_output.rowCount())]

        for ip in ip_list:
            if self.stop_snmp_walk_flag.is_set():
                break
            # Process OIDs from the JSON file
            for key, value in oid_data.items():
                if self.stop_snmp_walk_flag.is_set():
                    break
                oid = value['oid']
                name = value['name']
                column = self.get_column_index_by_name(name)
                if column is not None:
                    try:
                        errorIndication, errorStatus, errorIndex, varBinds = next(
                            getCmd(
                                SnmpEngine(),
                                CommunityData(self.txt_readCommunity.toPlainText(), mpModel=1),
                                UdpTransportTarget((ip, int(self.txt_port.toPlainText()))),
                                ContextData(),
                                ObjectType(ObjectIdentity(oid))
                            )
                        )
                        if errorIndication:
                            self.update_table(ip, column, f"Error: {str(errorIndication)}")
                        elif errorStatus:
                            error_message = f"{errorStatus.prettyPrint()} at {errorIndex and varBinds[int(errorIndex) - 1][0] or '?'}"
                            self.update_table(ip, column, error_message)
                        else:
                            for varBind in varBinds:
                                self.update_table(ip, column, varBind[1].prettyPrint())
                    except Exception as e:
                        self.update_table(ip, column, f"Error: {str(e)}")
            # Process OIDs from the temporary list
            for oid_entry in getattr(self, 'listOid', []):
                if self.stop_snmp_walk_flag.is_set():
                    break
                oid = oid_entry['oid']
                name = oid_entry['nameoid']
                column = self.get_column_index_by_name(name)
                if column is not None:
                    try:
                        errorIndication, errorStatus, errorIndex, varBinds = next(
                            getCmd(
                                SnmpEngine(),
                                CommunityData(self.txt_readCommunity.toPlainText(), mpModel=1),
                                UdpTransportTarget((ip, int(self.txt_port.toPlainText()))),
                                ContextData(),
                                ObjectType(ObjectIdentity(oid))
                            )
                        )
                        if errorIndication:
                            self.update_table(ip, column, f"Error: {str(errorIndication)}")
                        elif errorStatus:
                            error_message = f"{errorStatus.prettyPrint()} at {errorIndex and varBinds[int(errorIndex) - 1][0] or '?'}"
                            self.update_table(ip, column, error_message)
                        else:
                            for varBind in varBinds:
                                self.update_table(ip, column, varBind[1].prettyPrint())
                    except Exception as e:
                        self.update_table(ip, column, f"Error: {str(e)}")

    def get_column_index_by_name(self, name):
        for column in range(self.tbl_output.columnCount()):
            if self.tbl_output.horizontalHeaderItem(column).text() == name:
                return column
        return None

    def update_table(self, ip, column, value):
        for row in range(self.tbl_output.rowCount()):
            if self.tbl_output.item(row, 0).text() == ip:
                self.tbl_output.setItem(row, column, QtWidgets.QTableWidgetItem(value))
                break

    def export_to_excel(self):
        file_path, _ = QFileDialog.getSaveFileName(None, "Save Excel File", "", "Excel Files (*.xlsx *.xls)")
        if file_path:
            df = pd.DataFrame(columns=[self.tbl_output.horizontalHeaderItem(i).text() for i in range(self.tbl_output.columnCount())])
            for row in range(self.tbl_output.rowCount()):
                row_data = []
                for column in range(self.tbl_output.columnCount()):
                    item = self.tbl_output.item(row, column)
                    row_data.append(item.text() if item else "")
                df.loc[row] = row_data
            df.to_excel(file_path, index=False)

    def initialize_table_headers(self, headers):
        self.tbl_output.setColumnCount(len(headers))
        for index, header in enumerate(headers):
            item = QtWidgets.QTableWidgetItem()
            item.setText(header)
            self.tbl_output.setHorizontalHeaderItem(index, item)
        self.tbl_output.horizontalHeader().setDefaultSectionSize(150)
        self.tbl_output.horizontalHeader().setMinimumSectionSize(100)
        self.tbl_output.horizontalHeader().setStretchLastSection(True)
        self.tbl_output.verticalHeader().setDefaultSectionSize(30)

    def show_delta_columns(self):
        """
        Load OIDs from 'oid_Delta.json' into listOid and update the table headers.
        """
        self.current_oid_file = 'oid_Delta.json'  # Set file for Delta
        self.listOid = []  # Reset listOid

        with open(self.current_oid_file) as f:
            oid_data = json.load(f)

        # Thêm các OID từ JSON vào listOid
        for key, value in oid_data.items():
            self.listOid.append({
                "oid": value['oid'],
                "nameoid": value['name'],
                "valueType": "String"  # Default value type
            })

        # Cập nhật bảng dựa trên listOid
        columns = ["IP"] + [oid['nameoid'] for oid in self.listOid]
        self.initialize_table_headers(columns)

    def show_enatel_columns(self):
        """
        Load OIDs from 'oid_Enatel.json' into listOid and update the table headers.
        """
        self.current_oid_file = 'oid_Enatel.json'  # Set file for Enatel
        self.listOid = []  # Reset listOid

        with open(self.current_oid_file) as f:
            oid_data = json.load(f)

        # Thêm các OID từ JSON vào listOid
        for key, value in oid_data.items():
            self.listOid.append({
                "oid": value['oid'],
                "nameoid": value['name'],
                "valueType": "String"  # Default value type
            })

        # Cập nhật bảng dựa trên listOid
        columns = ["IP"] + [oid['nameoid'] for oid in self.listOid]
        self.initialize_table_headers(columns)

    def show_delta_columns(self):
        """
        Load OIDs from 'oid_Delta.json' into listOid and update the table headers.
        """
        self.current_oid_file = 'oid_Delta.json'  # Set file for Delta
        self.listOid = []  # Reset listOid

        with open(self.current_oid_file) as f:
            oid_data = json.load(f)

        # Thêm các OID từ JSON vào listOid
        for key, value in oid_data.items():
            self.listOid.append({
                "oid": value['oid'],
                "nameoid": value['name'],
                "valueType": "String"  # Default value type
            })

        # Cập nhật bảng dựa trên listOid
        columns = ["IP"] + [oid['nameoid'] for oid in self.listOid]
        self.initialize_table_headers(columns)

    def handle_form_selection(self, selection):
        """
        Handle the selection change in cbo_formSelector.
        """
        if self.snmp_walk_thread and self.snmp_walk_thread.is_alive():
            QMessageBox.warning(None, "Warning", "Cannot change selection while SNMP walk is running.")
            # Reset combo box to the current selection
            self.cbo_formSelector.blockSignals(True)
            self.cbo_formSelector.setCurrentText("Delta" if self.current_oid_file == 'oid_Delta.json' else 'Enatel')
            self.cbo_formSelector.blockSignals(False)
            return

        if selection == "Delta":
            self.show_delta_columns()
        elif selection == "Enatel":
            self.show_enatel_columns()

    def clear_table(self):
        self.tbl_output.setRowCount(0)
    
    def translate_oid_to_name(self,oid):
        """
        Thực thi lệnh snmptranslate để chuyển đổi OID thành tên.
        :param oid: OID cần chuyển đổi (chuỗi).
        :return: Tên của OID hoặc thông báo lỗi nếu không thành công.
        """
        try:
            # Thực thi lệnh snmptranslate
            result = subprocess.run(
                ["snmptranslate", oid],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            if result.returncode == 0:
                # Trả về kết quả nếu thành công
                return result
            else:
                # Trả về thông báo lỗi nếu có lỗi
                return f"Error: {result.stderr.strip()}"
        except FileNotFoundError:
            return "Error: snmptranslate command not found. Ensure it is installed and in PATH."
        except Exception as e:
            return f"Error: {str(e)}"

    def addOid(self):
        """
        Add a new OID to a temporary list and update the table with a new column for the OID.
        """
        if not hasattr(self, 'listOid'):
            self.listOid = []  # Initialize the list if it doesn't exist

        oidNew = self.txtoid.text().strip()
        if not oidNew:
            QMessageBox.warning(None, "Warning", "Please enter a valid OID.")
            return

        nameoid = self.translate_oid_to_name(oidNew)
        if isinstance(nameoid, str) and nameoid.startswith("Error"):
            QMessageBox.warning(None, "Error", f"Failed to translate OID: {nameoid}")
            return

        # Add the new OID to the list
        self.listOid.append({
            "nameoid": nameoid.stdout.strip(),
            "oid": oidNew,
            "valueType": "String"  # Default value type, can be adjusted
        })

        # Add a new column to the table for the OID
        column_count = self.tbl_output.columnCount()
        self.tbl_output.setColumnCount(column_count + 1)
        new_column_item = QtWidgets.QTableWidgetItem(nameoid.stdout.strip())
        self.tbl_output.setHorizontalHeaderItem(column_count, new_column_item)

        QMessageBox.information(None, "Success", f"OID '{oidNew}' added successfully.")

    def open_set_dialog(self):
        """
        Open the Set SNMP dialog.
        """
        self.set_dialog = QtWidgets.QDialog()
        self.ui_set = Ui_SetDialog()
        self.ui_set.setupUi(self.set_dialog)
        self.ui_set.btn_set.clicked.connect(self.start_snmp_set)  # Start SNMP set on button click
        self.ui_set.btn_cancel.clicked.connect(self.set_dialog.reject)
        self.set_dialog.exec()

    def start_snmp_set(self):
        """
        Start the SNMP set operation in a separate thread.
        """
        self.stop_snmp_walk_flag.clear()
        self.snmp_set_thread = threading.Thread(target=self.snmp_set)
        self.snmp_set_thread.start()

    def snmp_set(self):
        """
        Perform SNMP set operation for all IPs in the table.
        """
        try:
            ip_list = [self.tbl_output.item(row, 0).text() for row in range(self.tbl_output.rowCount())]

            oid = self.ui_set.txt_oid.text().strip()
            value = self.ui_set.txt_value.text().strip()
            value_type = self.ui_set.cbo_type.currentText()

            if not oid or not value:
                QMessageBox.warning(None, "Warning", "OID and Value cannot be empty.")
                return

            for ip in ip_list:
                if self.stop_snmp_walk_flag.is_set():
                    break
                try:
                    result = self.set_snmp_data(
                        ip=ip,
                        port=int(self.txt_port.toPlainText()),
                        community=self.txt_writeCommunity.toPlainText(),
                        oid=oid,
                        value=value,
                        value_type=value_type
                    )
                    # Hiển thị kết quả trong cửa sổ thông báo
                    QMessageBox.information(None, "SNMP Result", f"IP: {ip}\nResult: {result}")
                except Exception as e:
                    QMessageBox.critical(None, "Error", f"Error setting SNMP data for IP {ip}: {str(e)}")
                    print(f"Error setting SNMP data for IP {ip}: {e}")  # Debugging
        except Exception as e:
            QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")
            print(f"Critical error in snmp_set: {e}")  # Debugging

    def set_snmp_data(self, ip, port, community, oid, value, value_type):
        """
        Set SNMP data on a device.
        """
        try:
            # Map value type to pysnmp type
            if value_type == "Integer":
                value = Integer(int(value))
            elif value_type == "OctetString":
                value = OctetString(value)
            else:
                raise ValueError(f"Unsupported value type: {value_type}")

            errorIndication, errorStatus, errorIndex, varBinds = next(
                setCmd(
                    SnmpEngine(),
                    CommunityData(community, mpModel=1),  # Use SNMPv2c
                    UdpTransportTarget((ip, port)),
                    ContextData(),
                    ObjectType(ObjectIdentity(oid), value)
                )
            )

            if errorIndication:
                return f"Error: {errorIndication}"
            elif errorStatus:
                return f"Error: {errorStatus.prettyPrint()} at {errorIndex and varBinds[int(errorIndex) - 1][0] or '?'}"
            else:
                return f"Success: {varBinds[0][1].prettyPrint()}"

        except Exception as e:
            return f"Exception: {str(e)}"

    def handle_cell_clicked(self, row, column):
        """
        Handle the event when a cell is clicked in the table.
        Fetch the OID from the JSON file based on the selected cbo_formSelector value
        and display it in the txtoid field.
        """
        if column > 0:  # Assuming column 0 is for IPs and OID columns start from 1
            header_item = self.tbl_output.horizontalHeaderItem(column)
            if header_item:  # Ensure the header item exists
                oid_name = header_item.text()  # Get the column header (OID name)

                # Determine the current JSON file based on cbo_formSelector
                current_file = 'oid_Delta.json' if self.cbo_formSelector.currentText() == "Delta" else 'oid_Enatel.json'

                try:
                    # Load the JSON file
                    with open(current_file, 'r') as f:
                        oid_data = json.load(f)

                    # Find the OID corresponding to the column header
                    for key, value in oid_data.items():
                        if value['name'] == oid_name:
                            self.txtoid.setText(value['oid'])  # Update txtoid with the OID
                            return

                    # If no matching OID is found
                    self.txtoid.setText(oid_name)  # Hiển thị trực tiếp tên OID lên txtoid                
                except Exception as e:
                    QMessageBox.critical(None, "Error", f"Failed to load OID data: {str(e)}")

class Ui_SetDialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("SetDialog")
        Dialog.resize(400, 300)
        
        self.label_oid = QtWidgets.QLabel(parent=Dialog)
        self.label_oid.setGeometry(QtCore.QRect(30, 30, 100, 20))
        self.label_oid.setObjectName("label_oid")
        
        self.txt_oid = QtWidgets.QLineEdit(parent=Dialog)
        self.txt_oid.setGeometry(QtCore.QRect(150, 30, 200, 20))
        self.txt_oid.setObjectName("txt_oid")
        
        self.label_value = QtWidgets.QLabel(parent=Dialog)
        self.label_value.setGeometry(QtCore.QRect(30, 70, 100, 20))
        self.label_value.setObjectName("label_value")
        
        self.txt_value = QtWidgets.QLineEdit(parent=Dialog)
        self.txt_value.setGeometry(QtCore.QRect(150, 70, 200, 20))
        self.txt_value.setObjectName("txt_value")
        
        self.label_type = QtWidgets.QLabel(parent=Dialog)
        self.label_type.setGeometry(QtCore.QRect(30, 110, 100, 20))
        self.label_type.setObjectName("label_type")
        
        self.cbo_type = QtWidgets.QComboBox(parent=Dialog)
        self.cbo_type.setGeometry(QtCore.QRect(150, 110, 200, 20))
        self.cbo_type.setObjectName("cbo_type")
        self.cbo_type.addItems(["Integer", "OctetString"])
        
        self.btn_set = QtWidgets.QPushButton(parent=Dialog)
        self.btn_set.setGeometry(QtCore.QRect(150, 160, 75, 23))
        self.btn_set.setObjectName("btn_set")
        
        self.btn_cancel = QtWidgets.QPushButton(parent=Dialog)
        self.btn_cancel.setGeometry(QtCore.QRect(250, 160, 75, 23))
        self.btn_cancel.setObjectName("btn_cancel")
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("SetDialog", "Set SNMP Value"))
        self.label_oid.setText(_translate("SetDialog", "OID:"))
        self.label_value.setText(_translate("SetDialog", "Value:"))
        self.label_type.setText(_translate("SetDialog", "Type:"))
        self.btn_set.setText(_translate("SetDialog", "Set"))
        self.btn_cancel.setText(_translate("SetDialog", "Cancel"))
class Ui_AddOidDialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("AddOidDialog")
        Dialog.resize(400, 300)

        self.label_oid = QtWidgets.QLabel(parent=Dialog)
        self.label_oid.setGeometry(QtCore.QRect(30, 30, 100, 20))
        self.label_oid.setObjectName("label_oid")

        self.txt_oid = QtWidgets.QLineEdit(parent=Dialog)
        self.txt_oid.setGeometry(QtCore.QRect(150, 30, 200, 20))
        self.txt_oid.setObjectName("txt_oid")

        self.label_name = QtWidgets.QLabel(parent=Dialog)
        self.label_name.setGeometry(QtCore.QRect(30, 70, 100, 20))
        self.label_name.setObjectName("label_name")

        self.txt_name = QtWidgets.QLineEdit(parent=Dialog)
        self.txt_name.setGeometry(QtCore.QRect(150, 70, 200, 20))
        self.txt_name.setObjectName("txt_name")

        self.label_type = QtWidgets.QLabel(parent=Dialog)
        self.label_type.setGeometry(QtCore.QRect(30, 110, 100, 20))
        self.label_type.setObjectName("label_type")

        self.cbo_type = QtWidgets.QComboBox(parent=Dialog)
        self.cbo_type.setGeometry(QtCore.QRect(150, 110, 200, 20))
        self.cbo_type.setObjectName("cbo_type")
        self.cbo_type.addItems(["Integer", "OctetString"])

        self.btn_add = QtWidgets.QPushButton(parent=Dialog)
        self.btn_add.setGeometry(QtCore.QRect(150, 160, 75, 23))
        self.btn_add.setObjectName("btn_add")

        self.btn_cancel = QtWidgets.QPushButton(parent=Dialog)
        self.btn_cancel.setGeometry(QtCore.QRect(250, 160, 75, 23))
        self.btn_cancel.setObjectName("btn_cancel")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("AddOidDialog", "Add OID"))
        self.label_oid.setText(_translate("AddOidDialog", "OID:"))
        self.label_name.setText(_translate("AddOidDialog", "Name:"))
        self.label_type.setText(_translate("AddOidDialog", "Type:"))
        self.btn_add.setText(_translate("AddOidDialog", "Add"))
        self.btn_cancel.setText(_translate("AddOidDialog", "Cancel"))
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)

    def on_close():
        ui.stop_snmp_walk()  # Dừng luồng SNMP nếu đang chạy
        app.quit()  # Thoát ứng dụng

    Dialog.finished.connect(on_close)  # Kết nối sự kiện đóng cửa sổ
    Dialog.rejected.connect(on_close)
    Dialog.show()
    sys.exit(app.exec())


